import { simpleGit, SimpleGit } from "simple-git";
import * as fs from "fs";
import * as path from "path";

interface Commit {
  hash: string;
  message: string;
  author: string;
  date: string;
}

interface CommitGroup {
  title: string;
  emoji: string;
  commits: string[];
}

interface SummaryOptions {
  saveToFile?: boolean;
  outputPath?: string;
  repoPath?: string;
}

class WeeklySummary {
  private git: SimpleGit;

  constructor(repoPath?: string) {
    this.git = simpleGit(repoPath);
  }

  private async getCurrentUser(): Promise<string> {
    try {
      const result = await this.git.getConfig("user.name");
      return result.value || "";
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return "";
    }
  }

  private async getCommitsForLastWeek(username: string): Promise<Commit[]> {
    try {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
      const log = await this.git.log();

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –¥–∞—Ç–µ
      return log.all
        .filter((commit) => {
          const commitDate = new Date(commit.date);
          return (
            commit.author_name === username &&
            commitDate >= sevenDaysAgo &&
            commitDate <= new Date()
          );
        })
        .map((commit) => ({
          hash: commit.hash,
          message: commit.message.trim(),
          author: commit.author_name,
          date: commit.date,
        }));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤:", error);
      return [];
    }
  }

  private shouldIgnoreCommit(message: string): boolean {
    const ignoredPrefixes = ["merge", "chore", "docs"];
    const lowerMessage = message.toLowerCase();

    return ignoredPrefixes.some(
      (prefix) =>
        lowerMessage.startsWith(prefix + ":") || lowerMessage.includes(prefix)
    );
  }

  private getCommitGroup(message: string): { title: string; emoji: string } {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.startsWith("feat:")) {
      return { title: "Features", emoji: "üü¢" };
    }

    if (lowerMessage.startsWith("fix:")) {
      return { title: "Fixes", emoji: "üõ†" };
    }

    if (lowerMessage.startsWith("refactor:")) {
      return { title: "Refactoring", emoji: "üîß" };
    }

    return { title: "Other", emoji: "üìù" };
  }

  private groupCommits(commits: Commit[]): CommitGroup[] {
    const groups: { [key: string]: CommitGroup } = {};

    commits.forEach((commit) => {
      if (this.shouldIgnoreCommit(commit.message)) {
        return;
      }

      const { title, emoji } = this.getCommitGroup(commit.message);
      const key = `${emoji}${title}`;

      if (!groups[key]) {
        groups[key] = { title, emoji, commits: [] };
      }

      groups[key].commits.push(commit.message);
    });

    return Object.values(groups);
  }

  private formatMarkdown(groups: CommitGroup[]): string {
    if (groups.length === 0) {
      return "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.";
    }

    let markdown = "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n";

    groups.forEach((group) => {
      if (group.commits.length > 0) {
        markdown += `${group.emoji} **${group.title}**\n`;
        group.commits.forEach((commit) => {
          markdown += `- ${commit}\n`;
        });
        markdown += "\n";
      }
    });

    return markdown.trim();
  }

  private async saveToFile(
    content: string,
    outputPath?: string
  ): Promise<void> {
    try {
      const filename =
        outputPath ||
        `weekly-report-${new Date().toISOString().split("T")[0]}.md`;
      const filepath = path.resolve(filename);

      fs.writeFileSync(filepath, content, "utf8");
      console.log(`üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filepath}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
    }
  }

  async generateSummary(options: SummaryOptions = {}): Promise<void> {
    try {
      console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...");

      const username = await this.getCurrentUser();
      if (!username) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git");
        return;
      }

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
      if (options.repoPath) {
        console.log(`üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${options.repoPath}`);
      }

      const commits = await this.getCommitsForLastWeek(username);
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commits.length}`);

      const groups = this.groupCommits(commits);
      const markdown = this.formatMarkdown(groups);

      console.log("\n" + markdown);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (options.saveToFile) {
        await this.saveToFile(markdown, options.outputPath);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:", error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export { WeeklySummary };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  const repoPath = args.find((arg) => arg.startsWith("--repo="))?.split("=")[1];

  const summary = new WeeklySummary(repoPath);
  summary.generateSummary();
}
