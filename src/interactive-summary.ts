import { simpleGit, SimpleGit } from "simple-git";
import * as fs from "fs";
import * as path from "path";
import * as readline from "readline";

interface Commit {
  hash: string;
  message: string;
  author: string;
  date: string;
}

interface CommitGroup {
  title: string;
  emoji: string;
  commits: string[];
}

interface RepoConfig {
  name: string;
  path: string;
}

interface SummaryResult {
  repoName: string;
  content: string;
  hasCommits: boolean;
}

class WeeklySummary {
  private git: SimpleGit;

  constructor(repoPath?: string) {
    this.git = simpleGit(repoPath);
  }

  private async getCurrentUser(): Promise<string> {
    try {
      const result = await this.git.getConfig("user.name");
      return result.value || "";
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return "";
    }
  }

  private async getCommitsForLastWeek(username: string): Promise<Commit[]> {
    try {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
      const log = await this.git.log();

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –¥–∞—Ç–µ
      return log.all
        .filter((commit) => {
          const commitDate = new Date(commit.date);
          return (
            commit.author_name === username &&
            commitDate >= sevenDaysAgo &&
            commitDate <= new Date()
          );
        })
        .map((commit) => ({
          hash: commit.hash,
          message: commit.message.trim(),
          author: commit.author_name,
          date: commit.date,
        }));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤:", error);
      return [];
    }
  }

  private shouldIgnoreCommit(message: string): boolean {
    const ignoredPrefixes = ["merge", "chore", "docs"];
    const lowerMessage = message.toLowerCase();

    return ignoredPrefixes.some(
      (prefix) =>
        lowerMessage.startsWith(prefix + ":") || lowerMessage.includes(prefix)
    );
  }

  private getCommitGroup(message: string): { title: string; emoji: string } {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.startsWith("feat:")) {
      return { title: "Features", emoji: "üü¢" };
    }

    if (lowerMessage.startsWith("fix:")) {
      return { title: "Fixes", emoji: "üõ†" };
    }

    if (lowerMessage.startsWith("refactor:")) {
      return { title: "Refactoring", emoji: "üîß" };
    }

    return { title: "Other", emoji: "üìù" };
  }

  private groupCommits(commits: Commit[]): CommitGroup[] {
    const groups: { [key: string]: CommitGroup } = {};

    commits.forEach((commit) => {
      if (this.shouldIgnoreCommit(commit.message)) {
        return;
      }

      const { title, emoji } = this.getCommitGroup(commit.message);
      const key = `${emoji}${title}`;

      if (!groups[key]) {
        groups[key] = { title, emoji, commits: [] };
      }

      groups[key].commits.push(commit.message);
    });

    return Object.values(groups);
  }

  private formatMarkdown(groups: CommitGroup[]): string {
    if (groups.length === 0) {
      return "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.";
    }

    let markdown = "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n";

    groups.forEach((group) => {
      if (group.commits.length > 0) {
        markdown += `${group.emoji} **${group.title}**\n`;
        group.commits.forEach((commit) => {
          markdown += `- ${commit}\n`;
        });
        markdown += "\n";
      }
    });

    return markdown.trim();
  }

  async generateSummary(): Promise<void> {
    try {
      console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...");

      const username = await this.getCurrentUser();
      if (!username) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git");
        return;
      }

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);

      const commits = await this.getCommitsForLastWeek(username);
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commits.length}`);

      const groups = this.groupCommits(commits);
      const markdown = this.formatMarkdown(groups);

      console.log("\n" + markdown);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:", error);
    }
  }
}

class InteractiveSummary {
  private repos: RepoConfig[] = [];
  private rl: readline.Interface;

  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
  }

  private question(prompt: string): Promise<string> {
    return new Promise((resolve) => {
      this.rl.question(prompt, (answer) => {
        resolve(answer.trim());
      });
    });
  }

  private async validateRepoPath(repoPath: string): Promise<boolean> {
    try {
      const gitPath = path.join(repoPath, ".git");
      return fs.existsSync(gitPath);
    } catch {
      return false;
    }
  }

  private async scanRepo(repoPath: string): Promise<SummaryResult | null> {
    try {
      const summary = new WeeklySummary(repoPath);
      const repoName = path.basename(repoPath);

      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏
      const originalLog = console.log;
      let output = "";
      console.log = (...args: any[]) => {
        output += args.join(" ") + "\n";
      };

      await summary.generateSummary();

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
      console.log = originalLog;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ markdown —á–∞—Å—Ç—å - –∏—â–µ–º –æ—Ç üìä –¥–æ –∫–æ–Ω—Ü–∞ –∏–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
      const markdownMatch = output.match(
        /üìä \*\*–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\*\*[\s\S]*?(?=\n\nüîç|\n\nüìÅ|\n\n‚úÖ|\n\n‚ùå|$)/
      );
      const markdown = markdownMatch
        ? markdownMatch[0].trim()
        : "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.";

      const hasCommits = !markdown.includes("–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");

      return {
        repoName,
        content: markdown,
        hasCommits,
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error}`);
      return null;
    }
  }

  private async addRepo(): Promise<void> {
    console.log("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é:");
    console.log("   –ü—Ä–∏–º–µ—Ä: /Users/username/Desktop/my-project");
    console.log("   –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n");

    const repoPath = await this.question("–ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: ");

    if (!repoPath) {
      console.log("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if (!(await this.validateRepoPath(repoPath))) {
      console.log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º");
      console.log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª .git");
      return;
    }

    const repoName = path.basename(repoPath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if (this.repos.some((repo) => repo.path === repoPath)) {
      console.log(`‚ö†Ô∏è  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoName} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`);
      return;
    }

    console.log(`\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${repoName}`);

    const result = await this.scanRepo(repoPath);
    if (result) {
      this.repos.push({ name: repoName, path: repoPath });
      console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: ${repoName}`);

      if (result.hasCommits) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é`);
      } else {
        console.log(`üìä –ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
  }

  private async generateFinalReport(): Promise<void> {
    if (this.repos.length === 0) {
      console.log("\n‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è");
      return;
    }

    console.log("\n" + "=".repeat(60));
    console.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢");
    console.log("=".repeat(60));

    let allContent = "";
    let totalReposWithCommits = 0;

    for (const repo of this.repos) {
      console.log(`\nüìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repo.name}`);
      console.log(`üìç –ü—É—Ç—å: ${repo.path}`);

      const result = await this.scanRepo(repo.path);
      if (result) {
        console.log(result.content);
        allContent += `\n## üìÅ ${repo.name}\n\n${result.content}\n`;

        if (result.hasCommits) {
          totalReposWithCommits++;
        }
      }
    }

    console.log("\n" + "=".repeat(60));
    console.log(`üìà –ò–¢–û–ì–û:`);
    console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${this.repos.length}`);
    console.log(`   ‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –∫–æ–º–º–∏—Ç–∞–º–∏: ${totalReposWithCommits}`);
    console.log("=".repeat(60));

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const filename = `weekly-report-${
      new Date().toISOString().split("T")[0]
    }.md`;
    const filepath = path.resolve(filename);

    const fullReport = `# üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n\n**–î–∞—Ç–∞:** ${new Date().toLocaleDateString()}\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${
      process.env.USER || "Unknown"
    }\n\n${allContent}`;

    fs.writeFileSync(filepath, fullReport, "utf8");
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filepath}`);

    console.log("\n‚úÖ –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
  }

  async start(): Promise<void> {
    console.log("üöÄ Interactive Weekly Summary Generator");
    console.log("=".repeat(50));
    console.log("–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç");
    console.log("–ø–æ –≤–∞—à–∏–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º.\n");

    let continueAdding = true;

    while (continueAdding) {
      await this.addRepo();

      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
      console.log("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é:");
      console.log("   –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n");

      const nextRepoPath = await this.question("–ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: ");

      if (!nextRepoPath) {
        console.log("‚è≠Ô∏è  –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
        continueAdding = false;
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        if (!(await this.validateRepoPath(nextRepoPath))) {
          console.log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º");
          console.log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª .git");
          console.log("‚è≠Ô∏è  –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
          continueAdding = false;
        } else {
          const repoName = path.basename(nextRepoPath);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          if (this.repos.some((repo) => repo.path === nextRepoPath)) {
            console.log(`‚ö†Ô∏è  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoName} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`);
            console.log("‚è≠Ô∏è  –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤");
            continueAdding = false;
          } else {
            console.log(`\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${repoName}`);

            const result = await this.scanRepo(nextRepoPath);
            if (result) {
              this.repos.push({ name: repoName, path: nextRepoPath });
              console.log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: ${repoName}`);

              if (result.hasCommits) {
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é`);
              } else {
                console.log(`üìä –ö–æ–º–º–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
              }
            }
          }
        }
      }
    }

    await this.generateFinalReport();
    this.rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const interactive = new InteractiveSummary();
  interactive.start().catch(console.error);
}

export { InteractiveSummary };
